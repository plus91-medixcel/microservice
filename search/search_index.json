{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Description This microservice will help your project to set up video calls for users. Currently we are supporting google(hangout) meetings and zoom meetings. Microservice Overview through Diagram Steps to Integrate/use this microservice in your system For now, you will need to mail me the details like your product name along with the redirect url(redirect url will be used while connecting the user of your project with this microservice). My mail id = kaveri.bhumkar@plus91.in When you complete the above step, you will receive client_key in response using which you will be able to use the microservice\u2019s apis(features). Response status codes and their meaning 200: OK(default) 204: Content not found 400: Bad request 412: Precondition Failed(The precondition given in the request evaluated to false by the server) 422: Parameters not found 500: Internal server error APIs Note : timestamps to be considered IST(Asia/Kolkata) API List Call to Connect User Account Request Parameters Key Type Is Mandatory? client_key String Yes user_id String Yes connection_type Integer Yes Response Parameters Key Type status String iAccountId Integer expires_on Date connection_type Integer user_id String Request and Response object and example Request Url https://services.medixcel.in/connect /connectUserAccount.php Request Method GET Request parameter client_key client_key given at the time of client registration , user_id unique id of the user of the client , connection_type 1(zoom),2(google) Expected response status success/error , iAccountId Will be used to set up meeting ,expires_on connection expiry date when user do not request for set_up_meeting for 6 months straight Request Example https://services.medixcel.in/connect/connectUserAccount.php?client_key=medixcel_lite user_id=16 connection_type=2 Response Example status=success, iAccountId=35, expires_on=2020-12-21 22:25:30 PHP Sample Code ?php header('Location: ' .\u201dhttps://services.medixcel.in/connect/connectUserAccount.php?client_key=medixcel_lite user_id=2 connection_type=2\u201d); ? NodeJs Sample Code return res.redirect(\u201dhttps://services.medixcel.in/connect/connectUserAccount.php?client_key=medixcel_lite user_id=2 connection_type=2\u201d); Call to Schedule Meeting Request Parameters Key Type Is Mandatory? client_key String Yes video_call_provider_account_id Integer Yes duration_in_minutes Integer Yes meeting_title String Yes participants Array of Objects Yes iUserID String No sEmail Email Yes sFirstName String No sLastName String No Response Parameters Key Type output Output Object connection_type String request_recieved Request Object meeting_summary Meeting Summary Object iMeetingId Integer sMeetingUID String sMeetingURL String sHostMeetingURL String dAddedOn DateTime sMeetingTitle String sStartTime DateTime iDuration Integer meeting_object Meeting Object response_status_code Integer msg String Request and Response object and example Request Url https://services.medixcel.in/connect/set_up_meeting Request Method POST Request parameter { client_key : client_key , video_call_provider_account_id : Account id you received while connecting user account , duration_in_minutes : duration_in_minutes , meeting_title : meeting title participants :[{ iUserID : UId , sEmail : email id of attendee , sFirstName : first name of the attendee , sLastName : last name of the attendee }] } Expected response { output : { connection_type : 1(zoom),2(google) , request_recieved : request object , meeting_summary : { iMeetingId : Meeting Id , sMeetingUID : Meeting UID , sMeetingURL : Meeting url , sHostMeetingURL : host meeting url , dAddedOn : Request received on(date) , sMeetingTitle : Meeting title , sStartTime : meeting start time , iDuration : duration in minutes }, meeting_object : Meeting object }, response_status_code : response status code , msg : Response message } Request Example { client_key : medixcel_lite , video_call_provider_account_id : 35 , duration_in_minutes : 60 , meeting_title : Testing , participants :[{ iUserID : , sEmail : kaveri.bhumkar24@gmail.com , sFirstName : Kaveri , sLastName : Bhumkar }] } Response Example { output : { connection_type : 2 , request_recieved : { client_key : medixcel_lite , actionName : set_up_meeting , video_call_provider_account_id : 35 , duration_in_minutes : 60 , meeting_title : Testing , participants : [{\\ iUserID\\ :\\ \\ ,\\ sEmail\\ :\\ kaveri.bhumkar24@gmail.com\\ ,\\ sFirstName\\ :\\ Kaveri\\ ,\\ sLastName\\ :\\ Bhumkar\\ }] }, meeting_summary : { iMeetingID : 45, sMeetingUID : gqfcimkl9jm2u7p3g8tv1qm4uk , sMeetingURL : https://meet.google.com/znr-yxrc-xoc , sHostMeetingURL : https://meet.google.com/znr-yxrc-xoc , dAddedOn : 2020-06-21 22:26:25 , sMeetingTitle : Testing , sStartTime : 2020-06-21 22:26:25 , iDuration : 60 }, meeting_object : { kind : calendar#event , etag : \\ 3185517172314000\\ , id : gqfcimkl9jm2u7p3g8tv1qm4uk , status : confirmed , htmlLink : https://www.google.com/calendar/event?eid=Z3FmY2lta2w5am0ydTdwM2c4dHYxcW00dWsga2F2ZXJpLmJodW1rYXJAcGx1czkxLmlu , created : 2020-06-21T16:56:26.000Z , updated : 2020-06-21T16:56:26.157Z , summary : Testing , creator : { email : kaveri.bhumkar@plus91.in , self : true }, organizer : { email : kaveri.bhumkar@plus91.in , self : true }, start : { dateTime : 2020-06-21T22:26:25+05:30 , timeZone : Asia/Kolkata }, end : { dateTime : 2020-06-21T23:26:25+05:30 , timeZone : Asia/Kolkata }, iCalUID : gqfcimkl9jm2u7p3g8tv1qm4uk@google.com , sequence : 0, attendees : [ { email : kaveri.bhumkar24@gmail.com , displayName : Kaveri Bhumkar , responseStatus : needsAction } ], hangoutLink : https://meet.google.com/znr-yxrc-xoc , conferenceData : { createRequest : { requestId : db9b05086b5e8cd8afdd38f9209edded , conferenceSolutionKey : { type : hangoutsMeet }, status : { statusCode : success } }, entryPoints : [ { entryPointType : video , uri : https://meet.google.com/znr-yxrc-xoc , label : meet.google.com/znr-yxrc-xoc }, { regionCode : US , entryPointType : phone , uri : tel:+1-720-580-1188 , label : +1 720-580-1188 , pin : 880848705 } ], conferenceSolution : { key : { type : hangoutsMeet }, name : Google Meet , iconUri : https://lh5.googleusercontent.com/proxy/bWvYBOb7O03a7HK5iKNEAPoUNPEXH1CHZjuOkiqxHx8OtyVn9sZ6Ktl8hfqBNQUUbCDg6T2unnsHx7RSkCyhrKgHcdoosAW8POQJm_ZEvZU9ZfAE7mZIBGr_tDlF8Z_rSzXcjTffVXg3M46v }, conferenceId : znr-yxrc-xoc , signature : ADR/mfOqKiVmLGEBmIzZxN4nH+H3 }, reminders : { useDefault : true } } }, response_status_code : 200 , msg : success } PHP Sample Code ?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"video_call_provider_account_id\" = \"115\", \"start_time\":\"2020-07-04 23:30:01\", \"duration_in_minutes\"= \"20\", \"meeting_title\" = \"Testing that\", \"participants\"= [array( \"iUserID\"= \"\", \"sEmail\"= \"kaveri.bhumkar@plus91.in\", \"sFirstName\"= \"Kaveri\", \"sLastName\"= \"Bhumkar\" ), array( \"iUserID\"= \"\", \"sEmail\"= \"sagar.padalghare@plus91.in\", \"sFirstName\"= \"Sagar\", \"sLastName\"= \"Padalghare\" ) ] ); // API URL $url='https://services.medixcel.in/connect/reschedule_meeting'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ? NodeJs Sample Code const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); let participants = [{ iUserID:\"\", sEmail:\"kaveri.bhumkar@plus91.in\", sFirstName:\"Kaveri\", sLastName:\"Bhumkar\" }, { iUserID:\"\", sEmail:\"sagar.padalghare@plus91.in\", sFirstName:\"Sagar\", sLastName:\"Padalghare\" }]; app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"video_call_provider_account_id\",\"115\"); params.append(\"start_time\",\"2020-07-04 23:30:01\"); params.append(\"duration_in_minutes\",\"20\"); params.append(\"meeting_title\",\"Testing that\"); aParticipants = JSON.stringify(participants); params.append(\"participants\",aParticipants); fetch('https://services.medixcel.in/connect/schedule_meeting', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`)); Call to Get all Meetings of Client for Date Request Parameters Key Type Is Mandatory? client_key String Yes date Date Yes user_id String No Response Parameters Key Type output Output Object meetings_for_date Date total_meetings Integer meetings Array of Meetings Object connection_type Integer user_id String meeting_id Integer meeting_url String meeting_start_time DateTime meeting_duration Integer meeting_added_on DateTime response_status_code Integer msg String Request and Response object and example Request Url https://services.medixcel.in/connect/get_meetings_of_client_for_date Request Method POST Request parameter { client_key : client_key , date : Date in YYYY-MM-DD format , user_id : unique id of the user from client side(optional) } Expected response { output : { meetings_for_date : Date in YYYY-MM-DD format , total_meetings : Total number of meetings found for the date , meetings : [ { connection_type : 1(Zoom),2(Google) , user_id : Unique id of the user which makes it unique on client side meeting_id : Meeting id , meeting_url : Meeting Url , meeting_start_time : Meeting Start Time , meeting_duration : Duration of the meeting , meeting_added_on : Date and time of meeting added } ] } response_status_code : Response status code , msg : Response Message } Request Example { client_key : medixcel_lite , date : 2020-06-15 , user_id : } Response Example { output : { meetings_for_date : 2020-06-15 , total_meetings : 9, meetings : [ { user_id : 2 , connection_type : 2 , meeting_id : 10 , meeting_url : https://meet.google.com/mww-ixyc-skm , meeting_duration : 30 , meeting_start_time : 2020-06-15 08:55:59 , meeting_added_on : 2020-06-15 08:55:59 }, { user_id : 2 , connection_type : 2 , meeting_id : 11 , meeting_url : https://meet.google.com/ajg-onez-yth , meeting_duration : 30 , meeting_start_time : 2020-06-15 09:23:02 , meeting_added_on : 2020-06-15 09:23:02 }, { user_id : 2 , connection_type : 2 , meeting_id : 12 , meeting_url : https://meet.google.com/qnx-rogw-zjb , meeting_duration : 30 , meeting_start_time : 2020-06-15 09:24:50 , meeting_added_on : 2020-06-15 09:24:50 }, { user_id : 2 , connection_type : 2 , meeting_id : 13 , meeting_url : https://meet.google.com/uwo-rrfa-mdp , meeting_duration : 30 , meeting_start_time : 2020-06-15 10:08:20 , meeting_added_on : 2020-06-15 10:08:20 }, { user_id : 2 , connection_type : 2 , meeting_id : 14 , meeting_url : https://meet.google.com/kdc-ozwk-kdi , meeting_duration : 30 , meeting_start_time : 2020-06-15 10:13:40 , meeting_added_on : 2020-06-15 10:13:40 }, { user_id : 2 , connection_type : 2 , meeting_id : 29 , meeting_url : https://meet.google.com/cfn-pdmr-xnc , meeting_duration : 30 , meeting_start_time : 2020-06-15 17:26:56 , meeting_added_on : 2020-06-15 17:26:56 }, { user_id : 2 , connection_type : 2 , meeting_id : 30 , meeting_url : https://meet.google.com/vxc-arzb-vpo , meeting_duration : 30 , meeting_start_time : 2020-06-15 17:28:35 , meeting_added_on : 2020-06-15 17:28:35 }, { user_id : 4 , connection_type : 2 , meeting_id : 31 , meeting_url : https://meet.google.com/yqg-jmjc-cxt , meeting_duration : 30 , meeting_start_time : 2020-06-15 18:25:33 , meeting_added_on : 2020-06-15 18:25:33 }, { user_id : 4 , connection_type : 2 , meeting_id : 32 , meeting_url : https://meet.google.com/jfg-smcm-bfi , meeting_duration : 30 , meeting_start_time : 2020-06-15 18:30:20 , meeting_added_on : 2020-06-15 18:30:20 } ] }, response_status_code : 200 , msg : success } PHP Sample Code ?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"date\" = \"2020-06-15\" ); // API URL $url='https://services.medixcel.in/connect/get_meetings_of_client_for_date'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ? NodeJs Sample Code const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"date\",\"2020-06-15\"); fetch('https://services.medixcel.in/connect/get_meetings_of_client_for_date, { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`)); Call to Disconnect User Account Key Type Is Mandatory? client_key String Yes account_id Integer Yes Request Parameters Key Type output Output Object disconnected_account_id Integer response_status_code Integer msg String Response Parameters Key Type output Output Object disconnected_account_id Integer response_status_code Integer msg String Request and Response object and example Request Url https://services.medixcel.in/connect/disconnect_user_account Request Method POST Request parameter { client_key : client_key , account_id : Account id you received while connecting user account } Expected response { output : { disconnected_account_id : Account id of the disconnected user } response_status_code : Response status code , msg : Response Message } Request Example { client_key : medixcel_lite , account_id : 34 } Response Example { output : { disconnected_user_account : 34 }, response_status_code : 200 , msg : success } PHP Sample Code ?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"account_id\" = \"115\" ); // API URL $url='https://services.medixcel.in/connect/cancel_meeting'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ? NodeJs Sample Code const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"account_id\",\"115\"); fetch('https://services.medixcel.in/connect/disconnect_user_account', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`)); Call to Get Meeting Info Request Parameters Key Type Is Mandatory? client_key String Yes meeting_id Integer Yes Response Parameters Key Type output Output Object meeting_id Integer connection_type String meeting_summary Meeting Summary Object iMeetingId Integer sMeetingUID String sMeetingURL String sHostMeetingURL String dAddedOn DateTime sMeetingTitle String sStartTime DateTime iDuration Integer meeting_object Meeting Object response_status_code Integer msg String Request and Response object and example Request Url https://services.medixcel.in/connect/get_meeting_details Request Method POST Request parameter { client_key : client_key , meeting_id : meeting id } Expected response { output : { meeting_id : Meeting Id , connection_type : 1(zoom),2(google) , meeting_summary : { sMeetingUID : Meeting UID , sMeetingURL : Meeting url , sHostMeetingURL : host meeting url , dAddedOn : Request received on(date) , sMeetingTitle : Meeting title , sStartTime : meeting start time , iDuration : duration in minutes }, meeting_object : Meeting object }, response_status_code : response status code , msg : Response message } Request Example { client_key : medixcel_lite , meeting_id : 45 } Response Example { output : { connection_type : 2 , meeting_summary : { iMeetingID : 45 , sMeetingUID : gqfcimkl9jm2u7p3g8tv1qm4uk , sMeetingURL : https://meet.google.com/znr-yxrc-xoc , sHostMeetingURL : https://meet.google.com/znr-yxrc-xoc , dAddedOn : 2020-06-21 22:26:25 , sMeetingTitle : Testing , sStartTime : 2020-06-21 22:26:25 , iDuration : 60 }, meeting_object : { kind : calendar#event , etag : \\ 3185517172314000\\ , id : gqfcimkl9jm2u7p3g8tv1qm4uk , status : confirmed , htmlLink : https://www.google.com/calendar/event?eid=Z3FmY2lta2w5am0ydTdwM2c4dHYxcW00dWsga2F2ZXJpLmJodW1rYXJAcGx1czkxLmlu , created : 2020-06-21T16:56:26.000Z , updated : 2020-06-21T16:56:26.157Z , summary : Testing , creator : { email : kaveri.bhumkar@plus91.in , self : true }, organizer : { email : kaveri.bhumkar@plus91.in , self : true }, start : { dateTime : 2020-06-21T22:26:25+05:30 , timeZone : Asia/Kolkata }, end : { dateTime : 2020-06-21T23:26:25+05:30 , timeZone : Asia/Kolkata }, iCalUID : gqfcimkl9jm2u7p3g8tv1qm4uk@google.com , sequence : 0, attendees : [ { email : kaveri.bhumkar24@gmail.com , displayName : Kaveri Bhumkar , responseStatus : needsAction } ], hangoutLink : https://meet.google.com/znr-yxrc-xoc , conferenceData : { createRequest : { requestId : db9b05086b5e8cd8afdd38f9209edded , conferenceSolutionKey : { type : hangoutsMeet }, status : { statusCode : success } }, entryPoints : [ { entryPointType : video , uri : https://meet.google.com/znr-yxrc-xoc , label : meet.google.com/znr-yxrc-xoc }, { regionCode : US , entryPointType : phone , uri : tel:+1-720-580-1188 , label : +1 720-580-1188 , pin : 880848705 } ], conferenceSolution : { key : { type : hangoutsMeet }, name : Google Meet , iconUri : https://lh5.googleusercontent.com/proxy/bWvYBOb7O03a7HK5iKNEAPoUNPEXH1CHZjuOkiqxHx8OtyVn9sZ6Ktl8hfqBNQUUbCDg6T2unnsHx7RSkCyhrKgHcdoosAW8POQJm_ZEvZU9ZfAE7mZIBGr_tDlF8Z_rSzXcjTffVXg3M46v }, conferenceId : znr-yxrc-xoc , signature : ADR/mfOqKiVmLGEBmIzZxN4nH+H3 }, reminders : { useDefault : true } } }, response_status_code : 200 , msg : success } PHP Sample Code ?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"meeting_id\" = \"115\" ); // API URL $url='https://services.medixcel.in/connect/get_meeting_details'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ? NodeJs Sample Code const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"meeting_id\",\"115\"); fetch('https://services.medixcel.in/connect/get_meeting_details', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`)); Call to Cancel Meeting Request Parameters Key Type Is Mandatory? client_key String Yes meeting_id Integer Yes Response Parameters Key Type output Output Object cancelled_meeting_id Integer response_status_code Integer msg String Request and Response object and example Request Url https://services.medixcel.in/connect/cancel_meeting Request Method POST Request parameter { client_key : client_key , meeting_id : meeting id } Expected response { output : { cancelled_meeting_id : Meeting Id } }, response_status_code : response status code , msg : Response message } Request Example { client_key : medixcel_lite , meeting_id : 45 } Response Example { output : { cancelled_meeting_id : 45 }, response_status_code : 200 , msg : success } PHP Sample Code ?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"meeting_id\" = \"115\" ); // API URL $url='https://services.medixcel.in/connect/cancel_meeting'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ? NodeJs Sample Code const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"meeting_id\",\"115\"); fetch('https://services.medixcel.in/connect/cancel_meeting', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`)); Call to Reschedule Meeting Request Parameters Key Type Is Mandatory? client_key String Yes meeting_id Integer Yes start_time DateTime Yes duration_in_minutes Integer Yes Response Parameters Key Type output Output Object rescheduled_meeting_id Integer connection_type String request_recieved Request Object meeting_summary Meeting Summary Object iMeetingId Integer sMeetingUID String sMeetingURL String sHostMeetingURL String dAddedOn DateTime sMeetingTitle String sStartTime DateTime iDuration Integer meeting_object Meeting Object response_status_code Integer msg String Request and Response object and example Request Url https://services.medixcel.in/connect/reschedule_meeting Request Method POST Request parameter { client_key : client_key , meeting_id : meeting id , start_time : meeting start time , duration_in_minutes : duration in minutes } Expected response { output : { rescheduled_meeting_id : Meeting Id , connection_type : 1(zoom),2(google) , request_recieved : request object , meeting_summary : { sMeetingUID : Meeting UID , sMeetingURL : Meeting url , sHostMeetingURL : host meeting url , dAddedOn : Request received on(date) , sMeetingTitle : Meeting title , sStartTime : meeting start time , iDuration : duration in minutes }, meeting_object : Meeting object }, response_status_code : response status code , msg : Response message } Request Example { client_key : medixcel_lite , meeting_id : 45 , start_time : 2020-06-22 01:01:01 , duration_in_minutes : 60 } Response Example { output : { rescheduled_meeting_id : 45 , connection_type : 2 , request_recieved : { client_key : medixcel_lite , actionName : reschedule_meeting , meeting_id : 45 , start_time : 2020-06-22 01:01:01 , duration_in_minutes : 60 }, meeting_summary : { iMeetingID : 45 , sMeetingUID : gqfcimkl9jm2u7p3g8tv1qm4uk , sMeetingURL : https://meet.google.com/znr-yxrc-xoc , sHostMeetingURL : https://meet.google.com/znr-yxrc-xoc , dAddedOn : 2020-06-21 22:26:25 , sMeetingTitle : Testing , sStartTime : 2020-06-21 22:26:25 , iDuration : 60 }, meeting_object : { kind : calendar#event , etag : \\ 3185517172314000\\ , id : gqfcimkl9jm2u7p3g8tv1qm4uk , status : confirmed , htmlLink : https://www.google.com/calendar/event?eid=Z3FmY2lta2w5am0ydTdwM2c4dHYxcW00dWsga2F2ZXJpLmJodW1rYXJAcGx1czkxLmlu , created : 2020-06-21T16:56:26.000Z , updated : 2020-06-21T16:56:26.157Z , summary : Testing , creator : { email : kaveri.bhumkar@plus91.in , self : true }, organizer : { email : kaveri.bhumkar@plus91.in , self : true }, start : { dateTime : 2020-06-21T22:26:25+05:30 , timeZone : Asia/Kolkata }, end : { dateTime : 2020-06-21T23:26:25+05:30 , timeZone : Asia/Kolkata }, iCalUID : gqfcimkl9jm2u7p3g8tv1qm4uk@google.com , sequence : 0, attendees : [ { email : kaveri.bhumkar24@gmail.com , displayName : Kaveri Bhumkar , responseStatus : needsAction } ], hangoutLink : https://meet.google.com/znr-yxrc-xoc , conferenceData : { createRequest : { requestId : db9b05086b5e8cd8afdd38f9209edded , conferenceSolutionKey : { type : hangoutsMeet }, status : { statusCode : success } }, entryPoints : [ { entryPointType : video , uri : https://meet.google.com/znr-yxrc-xoc , label : meet.google.com/znr-yxrc-xoc }, { regionCode : US , entryPointType : phone , uri : tel:+1-720-580-1188 , label : +1 720-580-1188 , pin : 880848705 } ], conferenceSolution : { key : { type : hangoutsMeet }, name : Google Meet , iconUri : https://lh5.googleusercontent.com/proxy/bWvYBOb7O03a7HK5iKNEAPoUNPEXH1CHZjuOkiqxHx8OtyVn9sZ6Ktl8hfqBNQUUbCDg6T2unnsHx7RSkCyhrKgHcdoosAW8POQJm_ZEvZU9ZfAE7mZIBGr_tDlF8Z_rSzXcjTffVXg3M46v }, conferenceId : znr-yxrc-xoc , signature : ADR/mfOqKiVmLGEBmIzZxN4nH+H3 }, reminders : { useDefault : true } } }, response_status_code : 200 , msg : success } PHP Sample Code ?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"meeting_id\" = \"115\", \"start_time\":\"2020-07-04 23:30:01\", \"duration_in_minutes\"= \"20\", \"meeting_title\" = \"Testing that\", \"participants\"= [array( \"iUserID\"= \"\", \"sEmail\"= \"kaveri.bhumkar@plus91.in\", \"sFirstName\"= \"Kaveri\", \"sLastName\"= \"Bhumkar\" ), array( \"iUserID\"= \"\", \"sEmail\"= \"sagar.padalghare@plus91.in\", \"sFirstName\"= \"Sagar\", \"sLastName\"= \"Padalghare\" ) ] ); // API URL $url='https://services.medixcel.in/connect/reschedule_meeting'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ? NodeJs Sample Code const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); let participants = [{ iUserID:\"\", sEmail:\"kaveri.bhumkar@plus91.in\", sFirstName:\"Kaveri\", sLastName:\"Bhumkar\" }, { iUserID:\"\", sEmail:\"sagar.padalghare@plus91.in\", sFirstName:\"Sagar\", sLastName:\"Padalghare\" }]; app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"meeting_id\",\"115\"); params.append(\"start_time\",\"2020-07-04 23:30:01\"); params.append(\"duration_in_minutes\",\"20\"); params.append(\"meeting_title\",\"Testing that\"); aParticipants = JSON.stringify(participants); params.append(\"participants\",aParticipants); fetch('https://services.medixcel.in/connect/reschedule_meeting', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`));","title":"VCI Microservice"},{"location":"#description","text":"This microservice will help your project to set up video calls for users. Currently we are supporting google(hangout) meetings and zoom meetings.","title":"Description"},{"location":"#microservice-overview-through-diagram","text":"","title":"Microservice Overview through Diagram"},{"location":"#steps-to-integrateuse-this-microservice-in-your-system","text":"For now, you will need to mail me the details like your product name along with the redirect url(redirect url will be used while connecting the user of your project with this microservice). My mail id = kaveri.bhumkar@plus91.in When you complete the above step, you will receive client_key in response using which you will be able to use the microservice\u2019s apis(features).","title":"Steps to Integrate/use this microservice in your system"},{"location":"#response-status-codes-and-their-meaning","text":"200: OK(default) 204: Content not found 400: Bad request 412: Precondition Failed(The precondition given in the request evaluated to false by the server) 422: Parameters not found 500: Internal server error","title":"Response status codes and their meaning"},{"location":"#apis","text":"Note : timestamps to be considered IST(Asia/Kolkata)","title":"APIs"},{"location":"#api-list","text":"","title":"API List"},{"location":"#call-to-connect-user-account","text":"","title":"Call to Connect User Account"},{"location":"#request-parameters","text":"Key Type Is Mandatory? client_key String Yes user_id String Yes connection_type Integer Yes","title":"Request Parameters"},{"location":"#response-parameters","text":"Key Type status String iAccountId Integer expires_on Date connection_type Integer user_id String","title":"Response Parameters"},{"location":"#request-and-response-object-and-example","text":"Request Url https://services.medixcel.in/connect /connectUserAccount.php Request Method GET Request parameter client_key client_key given at the time of client registration , user_id unique id of the user of the client , connection_type 1(zoom),2(google) Expected response status success/error , iAccountId Will be used to set up meeting ,expires_on connection expiry date when user do not request for set_up_meeting for 6 months straight Request Example https://services.medixcel.in/connect/connectUserAccount.php?client_key=medixcel_lite user_id=16 connection_type=2 Response Example status=success, iAccountId=35, expires_on=2020-12-21 22:25:30","title":"Request and Response object and example"},{"location":"#php-sample-code","text":"?php header('Location: ' .\u201dhttps://services.medixcel.in/connect/connectUserAccount.php?client_key=medixcel_lite user_id=2 connection_type=2\u201d); ?","title":"PHP Sample Code"},{"location":"#nodejs-sample-code","text":"return res.redirect(\u201dhttps://services.medixcel.in/connect/connectUserAccount.php?client_key=medixcel_lite user_id=2 connection_type=2\u201d);","title":"NodeJs Sample Code"},{"location":"#call-to-schedule-meeting","text":"","title":"Call to Schedule Meeting"},{"location":"#request-parameters_1","text":"Key Type Is Mandatory? client_key String Yes video_call_provider_account_id Integer Yes duration_in_minutes Integer Yes meeting_title String Yes participants Array of Objects Yes iUserID String No sEmail Email Yes sFirstName String No sLastName String No","title":"Request Parameters"},{"location":"#response-parameters_1","text":"Key Type output Output Object connection_type String request_recieved Request Object meeting_summary Meeting Summary Object iMeetingId Integer sMeetingUID String sMeetingURL String sHostMeetingURL String dAddedOn DateTime sMeetingTitle String sStartTime DateTime iDuration Integer meeting_object Meeting Object response_status_code Integer msg String","title":"Response Parameters"},{"location":"#request-and-response-object-and-example_1","text":"Request Url https://services.medixcel.in/connect/set_up_meeting Request Method POST Request parameter { client_key : client_key , video_call_provider_account_id : Account id you received while connecting user account , duration_in_minutes : duration_in_minutes , meeting_title : meeting title participants :[{ iUserID : UId , sEmail : email id of attendee , sFirstName : first name of the attendee , sLastName : last name of the attendee }] } Expected response { output : { connection_type : 1(zoom),2(google) , request_recieved : request object , meeting_summary : { iMeetingId : Meeting Id , sMeetingUID : Meeting UID , sMeetingURL : Meeting url , sHostMeetingURL : host meeting url , dAddedOn : Request received on(date) , sMeetingTitle : Meeting title , sStartTime : meeting start time , iDuration : duration in minutes }, meeting_object : Meeting object }, response_status_code : response status code , msg : Response message } Request Example { client_key : medixcel_lite , video_call_provider_account_id : 35 , duration_in_minutes : 60 , meeting_title : Testing , participants :[{ iUserID : , sEmail : kaveri.bhumkar24@gmail.com , sFirstName : Kaveri , sLastName : Bhumkar }] } Response Example { output : { connection_type : 2 , request_recieved : { client_key : medixcel_lite , actionName : set_up_meeting , video_call_provider_account_id : 35 , duration_in_minutes : 60 , meeting_title : Testing , participants : [{\\ iUserID\\ :\\ \\ ,\\ sEmail\\ :\\ kaveri.bhumkar24@gmail.com\\ ,\\ sFirstName\\ :\\ Kaveri\\ ,\\ sLastName\\ :\\ Bhumkar\\ }] }, meeting_summary : { iMeetingID : 45, sMeetingUID : gqfcimkl9jm2u7p3g8tv1qm4uk , sMeetingURL : https://meet.google.com/znr-yxrc-xoc , sHostMeetingURL : https://meet.google.com/znr-yxrc-xoc , dAddedOn : 2020-06-21 22:26:25 , sMeetingTitle : Testing , sStartTime : 2020-06-21 22:26:25 , iDuration : 60 }, meeting_object : { kind : calendar#event , etag : \\ 3185517172314000\\ , id : gqfcimkl9jm2u7p3g8tv1qm4uk , status : confirmed , htmlLink : https://www.google.com/calendar/event?eid=Z3FmY2lta2w5am0ydTdwM2c4dHYxcW00dWsga2F2ZXJpLmJodW1rYXJAcGx1czkxLmlu , created : 2020-06-21T16:56:26.000Z , updated : 2020-06-21T16:56:26.157Z , summary : Testing , creator : { email : kaveri.bhumkar@plus91.in , self : true }, organizer : { email : kaveri.bhumkar@plus91.in , self : true }, start : { dateTime : 2020-06-21T22:26:25+05:30 , timeZone : Asia/Kolkata }, end : { dateTime : 2020-06-21T23:26:25+05:30 , timeZone : Asia/Kolkata }, iCalUID : gqfcimkl9jm2u7p3g8tv1qm4uk@google.com , sequence : 0, attendees : [ { email : kaveri.bhumkar24@gmail.com , displayName : Kaveri Bhumkar , responseStatus : needsAction } ], hangoutLink : https://meet.google.com/znr-yxrc-xoc , conferenceData : { createRequest : { requestId : db9b05086b5e8cd8afdd38f9209edded , conferenceSolutionKey : { type : hangoutsMeet }, status : { statusCode : success } }, entryPoints : [ { entryPointType : video , uri : https://meet.google.com/znr-yxrc-xoc , label : meet.google.com/znr-yxrc-xoc }, { regionCode : US , entryPointType : phone , uri : tel:+1-720-580-1188 , label : +1 720-580-1188 , pin : 880848705 } ], conferenceSolution : { key : { type : hangoutsMeet }, name : Google Meet , iconUri : https://lh5.googleusercontent.com/proxy/bWvYBOb7O03a7HK5iKNEAPoUNPEXH1CHZjuOkiqxHx8OtyVn9sZ6Ktl8hfqBNQUUbCDg6T2unnsHx7RSkCyhrKgHcdoosAW8POQJm_ZEvZU9ZfAE7mZIBGr_tDlF8Z_rSzXcjTffVXg3M46v }, conferenceId : znr-yxrc-xoc , signature : ADR/mfOqKiVmLGEBmIzZxN4nH+H3 }, reminders : { useDefault : true } } }, response_status_code : 200 , msg : success }","title":"Request and Response object and example"},{"location":"#php-sample-code_1","text":"?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"video_call_provider_account_id\" = \"115\", \"start_time\":\"2020-07-04 23:30:01\", \"duration_in_minutes\"= \"20\", \"meeting_title\" = \"Testing that\", \"participants\"= [array( \"iUserID\"= \"\", \"sEmail\"= \"kaveri.bhumkar@plus91.in\", \"sFirstName\"= \"Kaveri\", \"sLastName\"= \"Bhumkar\" ), array( \"iUserID\"= \"\", \"sEmail\"= \"sagar.padalghare@plus91.in\", \"sFirstName\"= \"Sagar\", \"sLastName\"= \"Padalghare\" ) ] ); // API URL $url='https://services.medixcel.in/connect/reschedule_meeting'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ?","title":"PHP Sample Code"},{"location":"#nodejs-sample-code_1","text":"const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); let participants = [{ iUserID:\"\", sEmail:\"kaveri.bhumkar@plus91.in\", sFirstName:\"Kaveri\", sLastName:\"Bhumkar\" }, { iUserID:\"\", sEmail:\"sagar.padalghare@plus91.in\", sFirstName:\"Sagar\", sLastName:\"Padalghare\" }]; app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"video_call_provider_account_id\",\"115\"); params.append(\"start_time\",\"2020-07-04 23:30:01\"); params.append(\"duration_in_minutes\",\"20\"); params.append(\"meeting_title\",\"Testing that\"); aParticipants = JSON.stringify(participants); params.append(\"participants\",aParticipants); fetch('https://services.medixcel.in/connect/schedule_meeting', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`));","title":"NodeJs Sample Code"},{"location":"#call-to-get-all-meetings-of-client-for-date","text":"","title":"Call to Get all Meetings of Client for Date"},{"location":"#request-parameters_2","text":"Key Type Is Mandatory? client_key String Yes date Date Yes user_id String No","title":"Request Parameters"},{"location":"#response-parameters_2","text":"Key Type output Output Object meetings_for_date Date total_meetings Integer meetings Array of Meetings Object connection_type Integer user_id String meeting_id Integer meeting_url String meeting_start_time DateTime meeting_duration Integer meeting_added_on DateTime response_status_code Integer msg String","title":"Response Parameters"},{"location":"#request-and-response-object-and-example_2","text":"Request Url https://services.medixcel.in/connect/get_meetings_of_client_for_date Request Method POST Request parameter { client_key : client_key , date : Date in YYYY-MM-DD format , user_id : unique id of the user from client side(optional) } Expected response { output : { meetings_for_date : Date in YYYY-MM-DD format , total_meetings : Total number of meetings found for the date , meetings : [ { connection_type : 1(Zoom),2(Google) , user_id : Unique id of the user which makes it unique on client side meeting_id : Meeting id , meeting_url : Meeting Url , meeting_start_time : Meeting Start Time , meeting_duration : Duration of the meeting , meeting_added_on : Date and time of meeting added } ] } response_status_code : Response status code , msg : Response Message } Request Example { client_key : medixcel_lite , date : 2020-06-15 , user_id : } Response Example { output : { meetings_for_date : 2020-06-15 , total_meetings : 9, meetings : [ { user_id : 2 , connection_type : 2 , meeting_id : 10 , meeting_url : https://meet.google.com/mww-ixyc-skm , meeting_duration : 30 , meeting_start_time : 2020-06-15 08:55:59 , meeting_added_on : 2020-06-15 08:55:59 }, { user_id : 2 , connection_type : 2 , meeting_id : 11 , meeting_url : https://meet.google.com/ajg-onez-yth , meeting_duration : 30 , meeting_start_time : 2020-06-15 09:23:02 , meeting_added_on : 2020-06-15 09:23:02 }, { user_id : 2 , connection_type : 2 , meeting_id : 12 , meeting_url : https://meet.google.com/qnx-rogw-zjb , meeting_duration : 30 , meeting_start_time : 2020-06-15 09:24:50 , meeting_added_on : 2020-06-15 09:24:50 }, { user_id : 2 , connection_type : 2 , meeting_id : 13 , meeting_url : https://meet.google.com/uwo-rrfa-mdp , meeting_duration : 30 , meeting_start_time : 2020-06-15 10:08:20 , meeting_added_on : 2020-06-15 10:08:20 }, { user_id : 2 , connection_type : 2 , meeting_id : 14 , meeting_url : https://meet.google.com/kdc-ozwk-kdi , meeting_duration : 30 , meeting_start_time : 2020-06-15 10:13:40 , meeting_added_on : 2020-06-15 10:13:40 }, { user_id : 2 , connection_type : 2 , meeting_id : 29 , meeting_url : https://meet.google.com/cfn-pdmr-xnc , meeting_duration : 30 , meeting_start_time : 2020-06-15 17:26:56 , meeting_added_on : 2020-06-15 17:26:56 }, { user_id : 2 , connection_type : 2 , meeting_id : 30 , meeting_url : https://meet.google.com/vxc-arzb-vpo , meeting_duration : 30 , meeting_start_time : 2020-06-15 17:28:35 , meeting_added_on : 2020-06-15 17:28:35 }, { user_id : 4 , connection_type : 2 , meeting_id : 31 , meeting_url : https://meet.google.com/yqg-jmjc-cxt , meeting_duration : 30 , meeting_start_time : 2020-06-15 18:25:33 , meeting_added_on : 2020-06-15 18:25:33 }, { user_id : 4 , connection_type : 2 , meeting_id : 32 , meeting_url : https://meet.google.com/jfg-smcm-bfi , meeting_duration : 30 , meeting_start_time : 2020-06-15 18:30:20 , meeting_added_on : 2020-06-15 18:30:20 } ] }, response_status_code : 200 , msg : success }","title":"Request and Response object and example"},{"location":"#php-sample-code_2","text":"?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"date\" = \"2020-06-15\" ); // API URL $url='https://services.medixcel.in/connect/get_meetings_of_client_for_date'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ?","title":"PHP Sample Code"},{"location":"#nodejs-sample-code_2","text":"const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"date\",\"2020-06-15\"); fetch('https://services.medixcel.in/connect/get_meetings_of_client_for_date, { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`));","title":"NodeJs Sample Code"},{"location":"#call-to-disconnect-user-account","text":"Key Type Is Mandatory? client_key String Yes account_id Integer Yes","title":"Call to Disconnect User Account"},{"location":"#request-parameters_3","text":"Key Type output Output Object disconnected_account_id Integer response_status_code Integer msg String","title":"Request Parameters"},{"location":"#response-parameters_3","text":"Key Type output Output Object disconnected_account_id Integer response_status_code Integer msg String","title":"Response Parameters"},{"location":"#request-and-response-object-and-example_3","text":"Request Url https://services.medixcel.in/connect/disconnect_user_account Request Method POST Request parameter { client_key : client_key , account_id : Account id you received while connecting user account } Expected response { output : { disconnected_account_id : Account id of the disconnected user } response_status_code : Response status code , msg : Response Message } Request Example { client_key : medixcel_lite , account_id : 34 } Response Example { output : { disconnected_user_account : 34 }, response_status_code : 200 , msg : success }","title":"Request and Response object and example"},{"location":"#php-sample-code_3","text":"?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"account_id\" = \"115\" ); // API URL $url='https://services.medixcel.in/connect/cancel_meeting'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ?","title":"PHP Sample Code"},{"location":"#nodejs-sample-code_3","text":"const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"account_id\",\"115\"); fetch('https://services.medixcel.in/connect/disconnect_user_account', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`));","title":"NodeJs Sample Code"},{"location":"#call-to-get-meeting-info","text":"","title":"Call to Get Meeting Info"},{"location":"#request-parameters_4","text":"Key Type Is Mandatory? client_key String Yes meeting_id Integer Yes","title":"Request Parameters"},{"location":"#response-parameters_4","text":"Key Type output Output Object meeting_id Integer connection_type String meeting_summary Meeting Summary Object iMeetingId Integer sMeetingUID String sMeetingURL String sHostMeetingURL String dAddedOn DateTime sMeetingTitle String sStartTime DateTime iDuration Integer meeting_object Meeting Object response_status_code Integer msg String","title":"Response Parameters"},{"location":"#request-and-response-object-and-example_4","text":"Request Url https://services.medixcel.in/connect/get_meeting_details Request Method POST Request parameter { client_key : client_key , meeting_id : meeting id } Expected response { output : { meeting_id : Meeting Id , connection_type : 1(zoom),2(google) , meeting_summary : { sMeetingUID : Meeting UID , sMeetingURL : Meeting url , sHostMeetingURL : host meeting url , dAddedOn : Request received on(date) , sMeetingTitle : Meeting title , sStartTime : meeting start time , iDuration : duration in minutes }, meeting_object : Meeting object }, response_status_code : response status code , msg : Response message } Request Example { client_key : medixcel_lite , meeting_id : 45 } Response Example { output : { connection_type : 2 , meeting_summary : { iMeetingID : 45 , sMeetingUID : gqfcimkl9jm2u7p3g8tv1qm4uk , sMeetingURL : https://meet.google.com/znr-yxrc-xoc , sHostMeetingURL : https://meet.google.com/znr-yxrc-xoc , dAddedOn : 2020-06-21 22:26:25 , sMeetingTitle : Testing , sStartTime : 2020-06-21 22:26:25 , iDuration : 60 }, meeting_object : { kind : calendar#event , etag : \\ 3185517172314000\\ , id : gqfcimkl9jm2u7p3g8tv1qm4uk , status : confirmed , htmlLink : https://www.google.com/calendar/event?eid=Z3FmY2lta2w5am0ydTdwM2c4dHYxcW00dWsga2F2ZXJpLmJodW1rYXJAcGx1czkxLmlu , created : 2020-06-21T16:56:26.000Z , updated : 2020-06-21T16:56:26.157Z , summary : Testing , creator : { email : kaveri.bhumkar@plus91.in , self : true }, organizer : { email : kaveri.bhumkar@plus91.in , self : true }, start : { dateTime : 2020-06-21T22:26:25+05:30 , timeZone : Asia/Kolkata }, end : { dateTime : 2020-06-21T23:26:25+05:30 , timeZone : Asia/Kolkata }, iCalUID : gqfcimkl9jm2u7p3g8tv1qm4uk@google.com , sequence : 0, attendees : [ { email : kaveri.bhumkar24@gmail.com , displayName : Kaveri Bhumkar , responseStatus : needsAction } ], hangoutLink : https://meet.google.com/znr-yxrc-xoc , conferenceData : { createRequest : { requestId : db9b05086b5e8cd8afdd38f9209edded , conferenceSolutionKey : { type : hangoutsMeet }, status : { statusCode : success } }, entryPoints : [ { entryPointType : video , uri : https://meet.google.com/znr-yxrc-xoc , label : meet.google.com/znr-yxrc-xoc }, { regionCode : US , entryPointType : phone , uri : tel:+1-720-580-1188 , label : +1 720-580-1188 , pin : 880848705 } ], conferenceSolution : { key : { type : hangoutsMeet }, name : Google Meet , iconUri : https://lh5.googleusercontent.com/proxy/bWvYBOb7O03a7HK5iKNEAPoUNPEXH1CHZjuOkiqxHx8OtyVn9sZ6Ktl8hfqBNQUUbCDg6T2unnsHx7RSkCyhrKgHcdoosAW8POQJm_ZEvZU9ZfAE7mZIBGr_tDlF8Z_rSzXcjTffVXg3M46v }, conferenceId : znr-yxrc-xoc , signature : ADR/mfOqKiVmLGEBmIzZxN4nH+H3 }, reminders : { useDefault : true } } }, response_status_code : 200 , msg : success }","title":"Request and Response object and example"},{"location":"#php-sample-code_4","text":"?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"meeting_id\" = \"115\" ); // API URL $url='https://services.medixcel.in/connect/get_meeting_details'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ?","title":"PHP Sample Code"},{"location":"#nodejs-sample-code_4","text":"const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"meeting_id\",\"115\"); fetch('https://services.medixcel.in/connect/get_meeting_details', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`));","title":"NodeJs Sample Code"},{"location":"#call-to-cancel-meeting","text":"","title":"Call to Cancel Meeting"},{"location":"#request-parameters_5","text":"Key Type Is Mandatory? client_key String Yes meeting_id Integer Yes","title":"Request Parameters"},{"location":"#response-parameters_5","text":"Key Type output Output Object cancelled_meeting_id Integer response_status_code Integer msg String","title":"Response Parameters"},{"location":"#request-and-response-object-and-example_5","text":"Request Url https://services.medixcel.in/connect/cancel_meeting Request Method POST Request parameter { client_key : client_key , meeting_id : meeting id } Expected response { output : { cancelled_meeting_id : Meeting Id } }, response_status_code : response status code , msg : Response message } Request Example { client_key : medixcel_lite , meeting_id : 45 } Response Example { output : { cancelled_meeting_id : 45 }, response_status_code : 200 , msg : success }","title":"Request and Response object and example"},{"location":"#php-sample-code_5","text":"?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"meeting_id\" = \"115\" ); // API URL $url='https://services.medixcel.in/connect/cancel_meeting'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ?","title":"PHP Sample Code"},{"location":"#nodejs-sample-code_5","text":"const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"meeting_id\",\"115\"); fetch('https://services.medixcel.in/connect/cancel_meeting', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`));","title":"NodeJs Sample Code"},{"location":"#call-to-reschedule-meeting","text":"","title":"Call to Reschedule Meeting"},{"location":"#request-parameters_6","text":"Key Type Is Mandatory? client_key String Yes meeting_id Integer Yes start_time DateTime Yes duration_in_minutes Integer Yes","title":"Request Parameters"},{"location":"#response-parameters_6","text":"Key Type output Output Object rescheduled_meeting_id Integer connection_type String request_recieved Request Object meeting_summary Meeting Summary Object iMeetingId Integer sMeetingUID String sMeetingURL String sHostMeetingURL String dAddedOn DateTime sMeetingTitle String sStartTime DateTime iDuration Integer meeting_object Meeting Object response_status_code Integer msg String","title":"Response Parameters"},{"location":"#request-and-response-object-and-example_6","text":"Request Url https://services.medixcel.in/connect/reschedule_meeting Request Method POST Request parameter { client_key : client_key , meeting_id : meeting id , start_time : meeting start time , duration_in_minutes : duration in minutes } Expected response { output : { rescheduled_meeting_id : Meeting Id , connection_type : 1(zoom),2(google) , request_recieved : request object , meeting_summary : { sMeetingUID : Meeting UID , sMeetingURL : Meeting url , sHostMeetingURL : host meeting url , dAddedOn : Request received on(date) , sMeetingTitle : Meeting title , sStartTime : meeting start time , iDuration : duration in minutes }, meeting_object : Meeting object }, response_status_code : response status code , msg : Response message } Request Example { client_key : medixcel_lite , meeting_id : 45 , start_time : 2020-06-22 01:01:01 , duration_in_minutes : 60 } Response Example { output : { rescheduled_meeting_id : 45 , connection_type : 2 , request_recieved : { client_key : medixcel_lite , actionName : reschedule_meeting , meeting_id : 45 , start_time : 2020-06-22 01:01:01 , duration_in_minutes : 60 }, meeting_summary : { iMeetingID : 45 , sMeetingUID : gqfcimkl9jm2u7p3g8tv1qm4uk , sMeetingURL : https://meet.google.com/znr-yxrc-xoc , sHostMeetingURL : https://meet.google.com/znr-yxrc-xoc , dAddedOn : 2020-06-21 22:26:25 , sMeetingTitle : Testing , sStartTime : 2020-06-21 22:26:25 , iDuration : 60 }, meeting_object : { kind : calendar#event , etag : \\ 3185517172314000\\ , id : gqfcimkl9jm2u7p3g8tv1qm4uk , status : confirmed , htmlLink : https://www.google.com/calendar/event?eid=Z3FmY2lta2w5am0ydTdwM2c4dHYxcW00dWsga2F2ZXJpLmJodW1rYXJAcGx1czkxLmlu , created : 2020-06-21T16:56:26.000Z , updated : 2020-06-21T16:56:26.157Z , summary : Testing , creator : { email : kaveri.bhumkar@plus91.in , self : true }, organizer : { email : kaveri.bhumkar@plus91.in , self : true }, start : { dateTime : 2020-06-21T22:26:25+05:30 , timeZone : Asia/Kolkata }, end : { dateTime : 2020-06-21T23:26:25+05:30 , timeZone : Asia/Kolkata }, iCalUID : gqfcimkl9jm2u7p3g8tv1qm4uk@google.com , sequence : 0, attendees : [ { email : kaveri.bhumkar24@gmail.com , displayName : Kaveri Bhumkar , responseStatus : needsAction } ], hangoutLink : https://meet.google.com/znr-yxrc-xoc , conferenceData : { createRequest : { requestId : db9b05086b5e8cd8afdd38f9209edded , conferenceSolutionKey : { type : hangoutsMeet }, status : { statusCode : success } }, entryPoints : [ { entryPointType : video , uri : https://meet.google.com/znr-yxrc-xoc , label : meet.google.com/znr-yxrc-xoc }, { regionCode : US , entryPointType : phone , uri : tel:+1-720-580-1188 , label : +1 720-580-1188 , pin : 880848705 } ], conferenceSolution : { key : { type : hangoutsMeet }, name : Google Meet , iconUri : https://lh5.googleusercontent.com/proxy/bWvYBOb7O03a7HK5iKNEAPoUNPEXH1CHZjuOkiqxHx8OtyVn9sZ6Ktl8hfqBNQUUbCDg6T2unnsHx7RSkCyhrKgHcdoosAW8POQJm_ZEvZU9ZfAE7mZIBGr_tDlF8Z_rSzXcjTffVXg3M46v }, conferenceId : znr-yxrc-xoc , signature : ADR/mfOqKiVmLGEBmIzZxN4nH+H3 }, reminders : { useDefault : true } } }, response_status_code : 200 , msg : success }","title":"Request and Response object and example"},{"location":"#php-sample-code_6","text":"?php //Request Data $aData = array( \"client_key\" = \"medixcel_lite\", \"meeting_id\" = \"115\", \"start_time\":\"2020-07-04 23:30:01\", \"duration_in_minutes\"= \"20\", \"meeting_title\" = \"Testing that\", \"participants\"= [array( \"iUserID\"= \"\", \"sEmail\"= \"kaveri.bhumkar@plus91.in\", \"sFirstName\"= \"Kaveri\", \"sLastName\"= \"Bhumkar\" ), array( \"iUserID\"= \"\", \"sEmail\"= \"sagar.padalghare@plus91.in\", \"sFirstName\"= \"Sagar\", \"sLastName\"= \"Padalghare\" ) ] ); // API URL $url='https://services.medixcel.in/connect/reschedule_meeting'; // Create a new cURL resource $ch = curl_init($url); $payload = json_encode($aData); // Attach encoded JSON string to the POST fields curl_setopt($ch, CURLOPT_POSTFIELDS, $payload); // Set the content type to application/json curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); // Return response instead of outputting curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); // Execute the POST request $result = curl_exec($ch); // Close cURL resource if (curl_errno($ch)) { $error_msg = curl_error($ch); } curl_close($ch); if (isset($error_msg)) { //Handle cURL error accordingly var_dump($error_msg); } //Print Result var_dump($result); ?","title":"PHP Sample Code"},{"location":"#nodejs-sample-code_6","text":"const express = require('express'); const bodyParser = require('body-parser'); const fetch = require('node-fetch'); const { URLSearchParams } = require('url'); const app = express(); app.use(express.static('public')); app.use(bodyParser.urlencoded({ extended: false })); app.use(bodyParser.json()); app.use(function(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\"); next(); }); let participants = [{ iUserID:\"\", sEmail:\"kaveri.bhumkar@plus91.in\", sFirstName:\"Kaveri\", sLastName:\"Bhumkar\" }, { iUserID:\"\", sEmail:\"sagar.padalghare@plus91.in\", sFirstName:\"Sagar\", sLastName:\"Padalghare\" }]; app.set('trust proxy', true); const params = new URLSearchParams(); //params to pass whill making fetch call to interface file params.append(\"client_key\",\"medixcel_lite\"); params.append(\"meeting_id\",\"115\"); params.append(\"start_time\",\"2020-07-04 23:30:01\"); params.append(\"duration_in_minutes\",\"20\"); params.append(\"meeting_title\",\"Testing that\"); aParticipants = JSON.stringify(participants); params.append(\"participants\",aParticipants); fetch('https://services.medixcel.in/connect/reschedule_meeting', { method: 'POST', body: params }) .then(res = res.json()) .then(json = { console.log(json); }) .catch(error = { // catch the error caused by error in interface code // log the error console.log(error); }); const port=3005; app.listen(port,()= console.log(`Listening to port ${port}`));","title":"NodeJs Sample Code"},{"location":"about/","text":"Cornibus litore barbara tibi capite vincla istis Sonabunt regisque latas custodit spiritus Lorem markdownum, artus, se victrix adhuc spectacula, carinas parte manebat guttis; per talia. Orbus haberet Aiaci teque doluit, suffuderat aeratis carent, sed, illa ora ad poscitur aufer. Viro ferre fatebar , specie ego superum caelo reor ipsis. Ut tectus ales, mero monstris cornua, laudata intabescere post inmergitque, omnipotens a. Oblivia eripiet incumbere sanguine iam? Erexit fatum, iube dum dona utar: formae sed ipsa blanditiis sanguine neque ubi egit bibit, suis nondum. Laterique culpa carpat amantes quicquam illius vulnusque egressus longo, vix retorserunt nobis ruricolam pavit coniugis virgine concipientibus exclamat. Fit ipse incessere sarcina Popularia in iter dies caelo Quid vult per memorant coepta procumbere curvantem Comitum facta Fatebar capillos sustinuere nunc receptus facis stellis Notas namque Unus posita Tenos Ismenos magis Amphrisia, lupi vox quoque sua re quibus collum, sanguine pinguntur curas: lumen. Cum a tenebat altera gratia profatur cruore prodigio, modo qui ture Bacchi. Aeacon spectacula tendunt per salix mittis aera , loco paludosa. Fetus ficti sucos aegre servo tempora , arcum praecincti cruentum vosne mihi sive sumpserat sustulit, per. Ortygie passura Tellus spernentem doleam dixit vertitur, ille nemo. Aversa tulit artus qui et credis est quamquam reperire, nominis illum. Adepta rapuere haud lumina super echidnae sollicito avellit rota vulneribus corpora: colla ego urbis aras mercede. Fundamina sustulit premitur luctus, non est tum mariti turribus frigus in nostri veste corpore Rhanisque , poenam. Lustrantem et metuit volenti: ira una laedi quondam; Peneia. Illis in dente incessit pennae, ore nos nocuit pars. Nutrici loquaci: bella loqui ambage arma: cibos, formam, imagine in cohaesit! Factis colentibus resecuta ratem , erat actis; peream aliter surgunt, haesit, aeterna. Resupinus et sagittis murmura fetus quodque, viscera eveniunt, pulsa frigora sumptas tu tenus. Tua pater novitate vultum audet quamvis vacet Carina placidoque tunc guttura Titania fatebitur insano munus, legit medium moveat. Et nemus circumspectis altus armis vulnus convellere adice decrescunt utero non pluma levis vera suas et comites tabellae quamquam. Umerum ni coniuge Bacchi, patientem pallor et Pirithoum patet profanat saxo diu illis, ubi turis coepti puduit. Natura neve tibi Narcissumque ossa, postquam potentia: fixa manus regia autumnum magis decebat melior? flowchartWpaPcb /= 4; lun += mampPersonalNtfs; optical_emulation.menuHandle += raw; Quaesitus peragit septemplice tenet; nec lentae magis; fera procul excidit. Calamos cum esset penset. Fidem est aestuat obsistitur haerent partem, tum ipse est suis telluris umero compressit. Quibus flumineis tempore caelo deus mota regisque sententia quoque fiducia crimine tam mihi aer ; artes pretiosior agna dignas.","title":"Cornibus litore barbara tibi capite vincla istis"},{"location":"about/#cornibus-litore-barbara-tibi-capite-vincla-istis","text":"","title":"Cornibus litore barbara tibi capite vincla istis"},{"location":"about/#sonabunt-regisque-latas-custodit-spiritus","text":"Lorem markdownum, artus, se victrix adhuc spectacula, carinas parte manebat guttis; per talia. Orbus haberet Aiaci teque doluit, suffuderat aeratis carent, sed, illa ora ad poscitur aufer. Viro ferre fatebar , specie ego superum caelo reor ipsis. Ut tectus ales, mero monstris cornua, laudata intabescere post inmergitque, omnipotens a. Oblivia eripiet incumbere sanguine iam? Erexit fatum, iube dum dona utar: formae sed ipsa blanditiis sanguine neque ubi egit bibit, suis nondum. Laterique culpa carpat amantes quicquam illius vulnusque egressus longo, vix retorserunt nobis ruricolam pavit coniugis virgine concipientibus exclamat. Fit ipse incessere sarcina Popularia in iter dies caelo Quid vult per memorant coepta procumbere curvantem Comitum facta Fatebar capillos sustinuere nunc receptus facis stellis Notas namque","title":"Sonabunt regisque latas custodit spiritus"},{"location":"about/#unus-posita-tenos","text":"Ismenos magis Amphrisia, lupi vox quoque sua re quibus collum, sanguine pinguntur curas: lumen. Cum a tenebat altera gratia profatur cruore prodigio, modo qui ture Bacchi. Aeacon spectacula tendunt per salix mittis aera , loco paludosa. Fetus ficti sucos aegre servo tempora , arcum praecincti cruentum vosne mihi sive sumpserat sustulit, per. Ortygie passura Tellus spernentem doleam dixit vertitur, ille nemo. Aversa tulit artus qui et credis est quamquam reperire, nominis illum. Adepta rapuere haud lumina super echidnae sollicito avellit rota vulneribus corpora: colla ego urbis aras mercede. Fundamina sustulit premitur luctus, non est tum mariti turribus frigus in nostri veste corpore Rhanisque , poenam. Lustrantem et metuit volenti: ira una laedi quondam; Peneia. Illis in dente incessit pennae, ore nos nocuit pars. Nutrici loquaci: bella loqui ambage arma: cibos, formam, imagine in cohaesit! Factis colentibus resecuta ratem , erat actis; peream aliter surgunt, haesit, aeterna. Resupinus et sagittis murmura fetus quodque, viscera eveniunt, pulsa frigora sumptas tu tenus.","title":"Unus posita Tenos"},{"location":"about/#tua-pater-novitate-vultum-audet-quamvis-vacet","text":"Carina placidoque tunc guttura Titania fatebitur insano munus, legit medium moveat. Et nemus circumspectis altus armis vulnus convellere adice decrescunt utero non pluma levis vera suas et comites tabellae quamquam. Umerum ni coniuge Bacchi, patientem pallor et Pirithoum patet profanat saxo diu illis, ubi turis coepti puduit. Natura neve tibi Narcissumque ossa, postquam potentia: fixa manus regia autumnum magis decebat melior? flowchartWpaPcb /= 4; lun += mampPersonalNtfs; optical_emulation.menuHandle += raw; Quaesitus peragit septemplice tenet; nec lentae magis; fera procul excidit. Calamos cum esset penset. Fidem est aestuat obsistitur haerent partem, tum ipse est suis telluris umero compressit. Quibus flumineis tempore caelo deus mota regisque sententia quoque fiducia crimine tam mihi aer ; artes pretiosior agna dignas.","title":"Tua pater novitate vultum audet quamvis vacet"}]}